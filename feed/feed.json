{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Hypersphere",
	"language": "en",
	"home_page_url": "https://hypersphere.codes/",
	"feed_url": "https://hypersphere.codes/feed/feed.json",
	"description": "Tech blog, mostly about TypeScript",
	"author": {
		"name": "Kacper Kula",
		"url": "https://github.com/kulak-at"
	},
	"items": [
		{
			"id": "https://hypersphere.codes/blog/typeguards-to-use-or-not/",
			"url": "https://hypersphere.codes/blog/typeguards-to-use-or-not/",
			"title": "TypeScript Typeguards: To use or not to use?",
			"content_html": "<p>TypeScript's static typing adds a layer of reliability and maintainability to JavaScript. Typeguards are a cornerstone of TypeScript and custom Typeguards can provide a lot of powerful typing options that would otherwise be impossible to achieve.</p>\n<p>In this article, I will go through built-in ways of typeguarding and how to create custom ones. I will also explain why it's not always a good idea to use custom typeguards and when you might want to rely on the built-in type narrowing of the language itself.</p>\n<h2 id=\"basics-of-typeguards\" tabindex=\"-1\">Basics of Typeguards <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typeguards-to-use-or-not/\">#</a></h2>\n<p>Typeguards are fundamental in TypeScript when dealing with uncertain types, particularly useful with unions and when dealing with variables typed as <code>any</code>. They can help you narrow down the type. Here’s a basic example using built-in <code>typeof</code> typeguard:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatInput</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> Date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// input is number</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// input is Date</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In this case, <code>typeof</code> is a Typeguard that helps TypeScript distinguish between a <code>number</code> and a <code>Date</code> type. Note that inside the body of the if condition we can use a method of the number and Date types respectively without any extra type casting. TypeScript can automatically narrow down the type for us.</p>\n<h2 id=\"custom-typeguards\" tabindex=\"-1\">Custom Typeguards <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typeguards-to-use-or-not/\">#</a></h2>\n<p>The built-in Typeguards might not always be enough. When you want to deal with more advanced logic, you might want to create your own custom TypeGuard. TypeScript allows you to do so using the following syntax:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPoint</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> value <span class=\"token keyword\">is</span> Point <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>y <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Custom Typeguards are functions that return a boolean value, indicating if an input is of a certain type. Instead of simply typing the function as returning boolean, we type it with type predicative, which is a special TypeScript syntax that will make TypeScript treat a variable as a specific type if the function returns true.</p>\n<p>Once implemented, you can use the typeguard in the if statements and TypeScript will automatically narrow the type for you:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPoint</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// data is typed here as Point, you can perform all Point operation here, no extra checks needed.</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">computeDistanceToOrigin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Here data is still typed as unknown</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"when-custom-typeguards-are-not-needed\" tabindex=\"-1\">When Custom TypeGuards are not needed? <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typeguards-to-use-or-not/\">#</a></h2>\n<p>Let's imagine the following union type in your module that renders some content provided to it. The content can be either text, image or video and you need to handle them differently.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TextContent</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n  content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ImageContent</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">;</span>\n  src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  altText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">VideoContent</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'video'</span><span class=\"token punctuation\">;</span>\n  src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  autoplay<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Content</span> <span class=\"token operator\">=</span> TextContent <span class=\"token operator\">|</span> ImageContent <span class=\"token operator\">|</span> VideoContent<span class=\"token punctuation\">;</span></code></pre>\n<p>It might be tempting to write a typeguard as the following:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token comment\">// Do not use this snippet, we will come up with something better ;)</span>\n<span class=\"token keyword\">const</span> isTextContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> content <span class=\"token keyword\">is</span> TextContent <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> isImageContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> content <span class=\"token keyword\">is</span> ImageContent <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'image'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processContent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTextContent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: TextContent</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isImageContent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: ImageContent</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: VideoContent</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The solution above works but is very explicit. We can improve it using <em>type narrowing using discriminated unions</em>. The name might sound intimidating but all it means is that TypeScript automatically narrows down types based on common properties in union types.\nIn our example, a simple check on the type string literal will help TypeScript decide which of the types we are dealing with. No custom typeguards are required.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processContent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: TextContent</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: ImageContent</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// content: VideoContent</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We did not need to use any custom typeguard here.</p>\n<p>We can even use <code>switch</code> statement in this case and simplify the code further:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">processContent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>content<span class=\"token operator\">:</span> Content<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'text'</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// content: TextContent</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'image'</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// content: ImageContent</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'video'</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">// content: VideoContent</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>For deeper dive into disriminated unions, check out the <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions\">official TypeScript Documentation about the topic</a>.</p>\n<h2 id=\"when-custom-typeguards-are-useful\" tabindex=\"-1\">When custom Typeguards are useful? <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typeguards-to-use-or-not/\">#</a></h2>\n<p>Sometimes we might need to use custom typeguards nevertheless. Quite often our guard logic might go beyond simple type safety rules and it might be based on the business logic that can't be expressed in the type system itself.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserModel</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    isAdmin<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookModel</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    isInStock<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Model</span> <span class=\"token operator\">=</span> UserModel <span class=\"token operator\">|</span> BookModel\n\n<span class=\"token keyword\">const</span> isUserModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> Model<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> model <span class=\"token keyword\">is</span> UserModel <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> isBookModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> Model<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> model <span class=\"token keyword\">is</span> BookModel <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> model<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> Model<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUserModel</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>model<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>model<span class=\"token punctuation\">.</span>isAdmin <span class=\"token operator\">?</span> <span class=\"token string\">'admin'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'regular user'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Book </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>model<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>model<span class=\"token punctuation\">.</span>isInStock <span class=\"token operator\">?</span> <span class=\"token string\">'(in stock)'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">logModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'book_1234'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Pride and Prejudice'</span><span class=\"token punctuation\">,</span>\n    isInStock<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>In the example above the rules go beyond the TypeScript type system but based on the business logic we can deduct that any model that's id starts with <code>book_</code> is a book model. This can help us narrow the type down even though without it we would need to check for presence of other properties instead.</p>\n<h2 id=\"when-typeguards-can-go-wrong\" tabindex=\"-1\">When Typeguards can go wrong? <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typeguards-to-use-or-not/\">#</a></h2>\n<p>Remember that typeguards are only as good as the logic you plug into them. The example from the previous section is good as long as we know our system guarantees ids matching the model shape. TypeScript will not check anything else and will trust us that the custom typeguard properly matched the type for us, so the following code will throw a runtime error.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token function\">logModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'book_444'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>In many cases, we can guarantee business logic constraints like that with no problem whatsoever, but it's important to remember that real-world data might not always conform to our expectations or assumptions.</p>\n<p>A robust application should include additional runtime checks or validation mechanisms to ensure that the data actually matches the types as defined in TypeScript, when in doubt. This is especially critical in cases where data is dynamically loaded, user-generated, or comes from external sources.</p>\n",
			"date_published": "2023-12-04T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/",
			"url": "https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/",
			"title": "Randomness in CSS using trigonometry",
			"content_html": "<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>In the past, <a href=\"https://medium.com/hypersphere-codes/randomness-in-css-b55a0845c8dd\">I have covered the topic of pseudo-randomness in CSS using modulo operation</a> and I <a href=\"https://medium.com/hypersphere-codes/counting-in-css-unlock-magic-of-css-variables-8e610881097a\">used prime numbers to create an automatic counter that can be used to generate different values for each object</a>. Thanks to that, we could compute pseudo-random values for each element independently.</p>\n<p>As robust as this solution is, it has few downsides:</p>\n<ul>\n<li>The modulo function is not continuous</li>\n<li>It is overly complex: requires 3 variables and <code>@property</code> definition for each random value we want to generate</li>\n<li>Requires using <code>@property</code> which is not widely supported yet</li>\n</ul>\n<p>Fortunately, we can do better! In this article, I would like to propose a better solution using trigonometry.</p>\n<h2 id=\"better-approach\" tabindex=\"-1\">Better approach <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h2>\n<p>Since the last time I explored this topic, new amazing features arrived in CSS. One of the most exciting additions is the trigonometric functions. They unlock a lot of previously impossible tasks. They are also the first bounded continuous functions natively supported in CSS, making them an amazing tool for creating pseudo-random generators.</p>\n<h3 id=\"randomness-vs-pseudo-randomness\" tabindex=\"-1\">Randomness vs pseudo-randomness <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>Obviously the solution presented here generates pseudo-random values only. All values are computed using predetermined constants. <a href=\"https://medium.com/hypersphere-codes/randomness-in-css-b55a0845c8dd\">As described in my previous article</a>, we can add an additional <code>--seed</code> variable and change it from the outside of the system (set it in JavaScript on load for example) to provide less deterministic outcome, but CSS does not provide any non-deterministic methods to work with. That said, the solution should be enough to get sufficient pseudo-random values for animations, positions, etc. If you want to use it to solve your cryptographic functions, you might be not using proper technology to begin with 😉</p>\n<h2 id=\"characteristics-of-a-sine-function\" tabindex=\"-1\">Characteristics of a sine function <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h2>\n<p>Sine and cosine functions are interesting for many reasons. They can be very useful in all sorts of operations where circles and rotations are involved. In our case though, we can use their properties for other purposes.</p>\n<h3 id=\"bounded-function\" tabindex=\"-1\">Bounded function <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>One of the great properties of sine and cosine is that the resulting values are always bounded between -1 and 1. It means, no matter how big or small the value you pass to it, the result will always be a value from this range. Then, we can perform simple normalisation to the range <code>[0,1]</code>. Having normalised values, we can use it to represent any value using simple linear mapping.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">--x</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> * 342.06184 + 23.434<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Then we can use it as following */</span>\n<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50 + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x<span class=\"token punctuation\">)</span> * 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n/* Red will be in the range of 50-150.</code></pre>\n<p>The code above uses our counter <code>var(--n)</code> introduced in my past article where I use prime numbers to create an effective way to automatically create a counter variable in CSS.</p>\n<a class=\"article-link\" href=\"https://medium.com/hypersphere-codes/counting-in-css-unlock-magic-of-css-variables-8e610881097a\">\n    <img src=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ASL8jncpPqtsOV-BVqxHnQ.png\">\n    <div class=\"details\">\n        <div class=\"link-title\">Counting in CSS: Unlock magic of CSS variables</div>\n        <p>Use prime numbers to create generic counters in CSS that you can use for all sorts of stuff.</p>\n        <div class=\"link-url\">medium.com/hypersphere-codes/counting-in-css-unlock-magic-of-css-variables-8e610881097a</div>\n    </div>\n</a>\n<p>The value is then multiplied and offset by some arbitrary values to provide a pseudo-random big number (the values do not really matter, you can change them as you wish to get different results). After that, we use the sine function to map it to the range <code>[-1, 1]</code>. Lastly, as shown in the animation below, we can map it to the range <code>[0, 1]</code> by applying a simple algebraic transformation. Once we obtain value from the range <code>[0, 1]</code>, we can use linear mapping to map it to any other desired value.</p>\n<img src=\"https://hypersphere.codes/blog/randomness/scaling.gif\" alt=\"Visualisation of Scaling\" class=\"full-bleed\">\n<h3 id=\"continuity\" tabindex=\"-1\">Continuity <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>Another characteristic of the sine function is continuity. You can <a href=\"https://en.wikipedia.org/wiki/Continuous_function\">explore the full formal definition of continuity here</a>, but to make things simple you can think of it that the small changes in the input for sine or cosine function will end up in small changes to the output. Thanks to that we can achieve a gradual change in values when animating while still having the system behave randomly.</p>\n<img src=\"https://hypersphere.codes/blog/randomness/continuity.gif\" alt=\"Visualisation of Continuity\" class=\"full-bleed\">\n<h2 id=\"examples\" tabindex=\"-1\">Examples <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h2>\n<p>Here are a few examples demonstrating the potential of using trigonometric functions to generate pseudo-random values.</p>\n<h3 id=\"circles-grid\" tabindex=\"-1\">Circles Grid <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>The first example shows sine properties in action. The generated values are random but we can still maintain order and feeling of continuity when it comes to both colour and size animation.</p>\n<p class=\"codepen\" data-height=\"600\" data-default-tab=\"result\" data-slug-hash=\"QWJBOgG\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/QWJBOgG\">\n  Randomness in CSS using Trigonomentry</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p>They key part of the code is computation of x, y, z and w variables which are used to represent red, green, blue and width respectively.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">div::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--x</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>4.284 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--y</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>7.284 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--z</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>4 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> + 2 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--w</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>0.2 * <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span>/100<span class=\"token punctuation\">)</span> + 0.8<span class=\"token punctuation\">)</span> * 49.123 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50 +  100 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>200 + 30 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>120 + 100 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--w<span class=\"token punctuation\">)</span>*50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The last 2 variables, in addition to our counter <code>--n</code>, use time variable <code>--t</code> which is obtained by running animation that is changing gradually the variable:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@property</span> --t</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;number>'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* &lt;- defined as type number for the transition to work */</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> timeOn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">{</span><span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 30<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 30s timeOn infinite linear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This is the only part of the code that uses <code>@property</code>. To make it work in all browsers, we could just simply update this variable in JavaScript without losing the ability to compute everything else in plain CSS.</p>\n<h3 id=\"blobs\" tabindex=\"-1\">Blobs <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>Randomness can be also used with SVG elements making it a powerful tool when combined with SVG Filters. The demo below was inspired by an <a href=\"https://css-tricks.com/gooey-effect/\">amazing CSS-Tricks article The Gooey Effect</a>.</p>\n<p class=\"codepen\" data-height=\"629.1723022460938\" data-default-tab=\"result\" data-slug-hash=\"oNQPYWW\" data-user=\"hypersphere\" style=\"height: 629.1723022460938px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/oNQPYWW\">\n  Randomness in CSS with Trigonometry using SVG circles</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p>Position of each individual blobs is determined using simple formula. The only difference is that we use cx, cy, r and fill to style them as they are SVG elements.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.blobs > circle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--x</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span> + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> * 74.543 + 432.43312<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--y</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span> + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> * 2.34 + 1.432<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--v</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5 + 0.5 * <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> * 4.343 + 2.673<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token property\">cx</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>10vw + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x<span class=\"token punctuation\">)</span> * 80vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cy</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>10vh + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--y<span class=\"token punctuation\">)</span> * 80vh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--v<span class=\"token punctuation\">)</span> * 5vw + 1vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>To achieve the gooey effect, we use the following SVG filter:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>goo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>15<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feColorMatrix</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>matrix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 22 -11<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>goo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feBlend</span> <span class=\"token attr-name\">in2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>goo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mix<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"memphis-pattern\" tabindex=\"-1\">Memphis Pattern <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css-using-trigonometry/\">#</a></h3>\n<p>The last demo is an <a href=\"https://medium.com/hypersphere-codes/randomness-in-css-b55a0845c8dd\">updated version of the example I used in my previous attempt for achieving randomness in CSS</a> where I used the modulo operator. With the new solution, calculations are much easier to understand and modify.</p>\n<p class=\"codepen\" data-height=\"589.572509765625\" data-default-tab=\"result\" data-slug-hash=\"yLQqGYj\" data-user=\"hypersphere\" style=\"height: 589.572509765625px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/yLQqGYj\">\n  Memphis Pattern using Trigonometry randomness</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<hr>\n<p>This article is also <a href=\"https://medium.com/hypersphere-codes/randomness-in-css-with-trigonometry-functions-fac71c89cd23\">available on my Medium Blog</a>. If you enjoy it, consider heading there and following me for more content.</p>\n",
			"date_published": "2023-07-31T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/gameboy-like-app-in-13k/",
			"url": "https://hypersphere.codes/blog/gameboy-like-app-in-13k/",
			"title": "How I created a GameBoy-like game in 13kb",
			"content_html": "<!-- <img alt=\"Article Cover\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.694915254237288\" width=\"2000\" height=\"1180\" src=\"/img/TwPZntxLeN-2000.webp\"> -->\n<p>This year I decided to participate in the js13kgames game jam. It’s a yearly, month-long competition to create a game in JavaScript from scratch that will fit 13kb (zipped). It does not sound like plenty of space, but with enough creativity, a lot can be achieved. Just look at those amazing examples from the past years:</p>\n<ul>\n<li><a href=\"https://js13kgames.com/entries/underrun\">Underrun</a> (winner in 2018)</li>\n<li><a href=\"https://js13kgames.com/entries/ninja-vs-evilcorp\">Ninja vs Evil-corp</a> (winner in 2020)</li>\n<li><a href=\"https://js13kgames.com/entries/beat-rocks\">Beat Rocks</a> (2nd place in 2021)</li>\n</ul>\n<p>Even though my game did not rank high this year, I still want to share some discoveries I’ve made along my journey.</p>\n<p>For this year’s entry, I decided to create a game that evokes the retro era of handheld games, with its unique square form factor, low resolution, and top-down graphics. For the gameplay, I’ve wanted it to be a fast-paced action-RPG style, with easy but addictive gameplay that encourages you to continue playing. The music choice was obvious — sound effects must feel like taken directly from the arcades.</p>\n<p>If you want to play the game, you can do it on <a href=\"https://js13kgames.com/entries/gravepassing\">the Gravepassing JS13KGames entry page</a>. The full code is <a href=\"https://github.com/h-sphere/gravepassing\">available on GitHub</a>.</p>\n<p>In this article I would like to describe my journey and the different components and challenges I faced along the way:</p>\n<ul>\n<li>Inspirations</li>\n<li>Drawing graphics using emojis</li>\n<li>Dithering effect</li>\n<li>Object storage using Quad Tree</li>\n<li>Music</li>\n<li>Compression</li>\n</ul>\n<h2 id=\"inspirations-and-graphics\" tabindex=\"-1\">Inspirations and graphics <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>The choice for the graphics was a mix of the 1990s style handheld and home consoles like GameBoy Color and NES games. It wasn’t meant to mimic any specific game or style, but rather to be reminiscent of the era.</p>\n<img alt=\"Inspirations\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.2260869565217392\" width=\"2115\" height=\"1725\" src=\"https://hypersphere.codes/img/PD2D3sRs6s-2115.webp\">\n<p>I decided to go with 16x16px tiles making up one game unit. Each time on the screen you can see a 10x10 grid which results in a resolution of 160x160px (integer upscaled to look good on modern displays). This results in a more-or-less GameBoy feel, although the original hardware used 8x8px tiles instead and 160×144px resolution in total.</p>\n<p>As for the graphics, due to the size limitation, I restrained from adding any sprite maps. Instead, I use downscaled emojis to combine the sprites.</p>\n<img alt=\"Regular emojis rendered in very small sizes can get completely new meanings.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1\" width=\"792\" height=\"792\" src=\"https://hypersphere.codes/img/HEcdLvu56b-792.webp\">\n<p>The image above shows how the player model was built. It uses 4 emojis. Unsurprisingly I used a head emoji for a head with glasses on top, and trousers for a bottom part of a sprite. The torso part is a <a href=\"https://en.wikipedia.org/wiki/Red_envelope\">Red Envelope</a> though, a popular monetary gift in Southeast Asia. Drawn in this resolution it loses all the details and the elongated shape of it is perfect to simulate the body.</p>\n<p>Emojis are not unified across the operating systems, which leads to the interesting effect of game rendering completely different on each OS. You can see the differences in the image below:</p>\n<img alt=\"Different operating systems: Windows, Ubuntu, MacOS\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.0350132625994695\" width=\"3836\" height=\"1885\" src=\"https://hypersphere.codes/img/fwkFVCEbYB-3836.webp\">\n<p>Moreover, not all the systems support the same version of Unicode, making some of the newer emojis not compatible with older systems. In the screenshot above you can see that the tombstone emoji (🪦) was replaced with a coffin (⚰️) on Windows and Ubuntu — <a href=\"https://emojipedia.org/headstone/\">tombstone was introduced in Unicode 13.0</a>. To achieve it I have created a small script rendering each emoji and checking if it was rendered properly. If not, it’s replaced with its equivalent specified in the handwritten configuration. Because emojis on different systems might have different sizes, some fine-tuning was required too.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">OptionalEmojiSet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// EMOJI</span>\n    e<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// POS</span>\n    pos<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// SIZE</span>\n    size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> alt<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> OptionalEmojiSet<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"🪦\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"⚰️\"</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token number\">.9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"⛓\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"👖\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🪨\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"💀\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🪵\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"🌳\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🦴\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"💀\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> win<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> OptionalEmojiSet<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"🔥\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"💣\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👱\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🕶\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token operator\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"⬛️\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👖\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🐷\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🦋\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🐮\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👔\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👩\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🤖\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👚\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"🐵\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"☢️\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"👹\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> tux<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> OptionalEmojiSet<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"🧧\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> e<span class=\"token operator\">:</span> <span class=\"token string\">\"👔\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>To check when each of the emojis was introduced, <a href=\"https://www.unicode.org/emoji/charts/emoji-versions.html\">the following table was a really handy resource</a>.</p>\n<h2 id=\"game-screen-structure\" tabindex=\"-1\">Game Screen Structure <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>The screen displays 10x10 grid of 16px x 16px tiles making total of 160x160px resolution. Obviously, displaying it directly in such resolution would result in a tiny square on our modern 4k screens — that’s why the image is integer upscaled to the maximum value possible.</p>\n<img alt=\"Game Screen Structure.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.6164987405541562\" width=\"2567\" height=\"1588\" src=\"https://hypersphere.codes/img/3cdrX0sTmY-2567.webp\">\n<p>To downscale emojis, I used a separate, tiny canvas that kept individual spites rendered in its original 16x16px. Then I can use those sprites to render them to the big destination canvas whenever needed. This allowed me to generate temporary sprite sheets to check if the tiles were properly generated.</p>\n<p>By default, canvas uses image smoothing meaning that when the sprite gets upscaled, it will be smoothened using antialiasing. To avoid that, we need to turn it off.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\">context<span class=\"token punctuation\">.</span>imageSmoothingEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"canvas-optimisation\" tabindex=\"-1\">Canvas Optimisation <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h3>\n<p>One of the weird optimization techniques I came across was generating a bitmap from the canvas without saving it. I suspect this marks that portion of the canvas as not changed for future uses and can optimize rendering, but I could not find any definite answer what’s the exact mechanism that’s causing it. If you know the answer, please share it in the comments!</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token function\">createImageBitmap</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This makes consecutive rendering faster</span></code></pre>\n<h2 id=\"quadtree\" tabindex=\"-1\">QuadTree <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>During the game lifecycle, a lot of game objects appear and disappear from the screen. The majority of the game logic revolves around finding which objects are close to each other and detecting collisions or proximity of them — every interaction like movement, detecting collisions, enemies following the player, etc; includes logic for finding objects within some distance. The most naive solution for this problem would be to check all objects stored in the memory. Unfortunately, this requires a lot of comparisons. If we would like to perform this action for each of the elements, this would result in having to do O(n²) comparisons every frame.</p>\n<p>With QuadTree, we can do a precomputation to optimize this process. The tree stores our elements in its nodes until the node reaches its capacity. In this scenario, it divides the space into four subspaces (thus the quad in the name). Then, each time we want to find all elements within the given area, we can easily discard objects outside the boundary. The whole process is recursive, so you end up with a structure that is really fast to find elements in.</p>\n<img alt=\"Visual representation of a quad-tree. The space gets divided into four subsections if there are too many items within its boundaries. Green rectangles represent the boundaries of the game objects.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.092896174863388\" width=\"1200\" height=\"1098\" src=\"https://hypersphere.codes/img/cG8yr5Ofk9-1200.webp\">\n<p>The recursive implementation itself is not too long and can easily fit within 100 lines.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GameObject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../modules/GameObjects/GameObject\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rectangle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../modules/Primitives\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuadTree</span> <span class=\"token punctuation\">{</span>\n    objects<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>GameObject<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subtrees<span class=\"token operator\">:</span> QuadTree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> _boundary<span class=\"token operator\">:</span> Rectangle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">boundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_boundary<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">subTrees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">subdivide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>p1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuadTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuadTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuadTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuadTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// we need to add all exisitng points now</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> GameObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span><span class=\"token function\">isIntersectingRectangle</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subdivide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n               t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">getInArea</span><span class=\"token punctuation\">(</span>boundary<span class=\"token operator\">:</span> Rectangle<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span>GameObject<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boundary<span class=\"token punctuation\">.</span><span class=\"token function\">isIntersectingRectangle</span><span class=\"token punctuation\">(</span>boundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subtrees<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span>GameObject<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> tree <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subTrees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tree<span class=\"token punctuation\">.</span><span class=\"token function\">getInArea</span><span class=\"token punctuation\">(</span>boundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span>GameObject<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boundary<span class=\"token punctuation\">.</span><span class=\"token function\">isIntersectingRectangle</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                points<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> points<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"dithering-effect\" tabindex=\"-1\">Dithering Effect <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<img alt=\"Dithering effect.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.1226666666666665\" width=\"2388\" height=\"1125\" src=\"https://hypersphere.codes/img/PUyIudwzQM-2388.webp\">\n<p>To achieve retro aesthetics instead of varying the opacity of shadows, I resorted to dithering.</p>\n<p>The dithering effect is a technique of mimicking a richer color palette by alternating colors from the smaller set. In the picture above each of the patterns seems to be increasing in brightness even though all of them use just 2 base colors — black and purple.</p>\n<p>The effect was commonly used in old consoles and early computer games and applications where the palette was limited. This made developers think outside the box and use techniques like dithering to fake our eyes into thinking there are more colors than actually were displayed on the screen. And maybe most notably GameBoy Camera used ordered dither to display any image captured with it.</p>\n<p>I plan to write a separate article about the effect and some use cases but before that, you can check the code for the effect in the following CodePen:</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"OJZJZxY\" data-user=\"hypersphere\" style=\"height: 800px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/OJZJZxY\">\n  Dither</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"post-processing\" tabindex=\"-1\">Post Processing <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>Post-processing was an important step in making my game look more realistically retro. The old CRT created very unique artifacts when displaying color images due to the architecture of the display.</p>\n<img alt=\"Photo by ryuuji89 from Please show off what crt shaders can do!\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.356\" width=\"678\" height=\"500\" src=\"https://hypersphere.codes/img/kUgpRapiGM-678.webp\">\n<p>In my attempt to emulate old retro style I overlayed a variation of <a href=\"https://en.wikipedia.org/wiki/Bayer_filter\">Bayers Filter</a> with a slight blur on top of every game pixel and blended it using color-burn blend mode. This made the game have its original style. It, unfortunately, made it way darker but with the main theme around death, it seemed appropriate.</p>\n<img alt=\"Postprocessing\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.4613636363636364\" width=\"2572\" height=\"1760\" src=\"https://hypersphere.codes/img/4wHe5u0V2n-2572.webp\">\n<p>Here’s the snippet of the code responsible for the effect:</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token comment\">// drawing on posteffect canvas if it was not done before with slight blur between color \"pixels\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span><span class=\"token constant\">MULTIPLIER</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token string\">'blur(1px)'</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  m <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pattern <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createPattern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>postCanvas<span class=\"token punctuation\">,</span> <span class=\"token string\">\"repeat\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// blending it using color-burn</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>globalAlpha <span class=\"token operator\">=</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>globalCompositeOperation <span class=\"token operator\">=</span> <span class=\"token string\">\"color-burn\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pattern<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reverting original blend mode.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>globalCompositeOperation <span class=\"token operator\">=</span> <span class=\"token string\">\"source-over\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>globalAlpha <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"audio\" tabindex=\"-1\">Audio <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>To generate music I’ve used WebAudio API which provides node-based architecture you can use to combine oscillators, filters, effects, and other audio nodes together.</p>\n<img alt=\"Web Audio\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.08955223880597\" width=\"1400\" height=\"670\" src=\"https://hypersphere.codes/img/cfqeE-TQyT-1400.webp\">\n<p>I have <a href=\"https://github.com/h-sphere/gravepassing/blob/main/src/modules/Audio/AudioTrack.ts\">implemented a simple audio tracker</a> that reads predefined music scores and schedules audio. The track can be defined as a string of MIDI notes, encoded as UTF-8 characters:</p>\n<img alt=\"UTF-8 to MIDI converter\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.6614620298083747\" width=\"2341\" height=\"1409\" src=\"https://hypersphere.codes/img/4I8waPiEJJ-2341.webp\">\n<p>A song consists of multiple tracks. They share the same BPM but can have different time divisions defined making it quite easy to iterate on music ideas.</p>\n<p>If you want to learn more about how to use Web Audio, I highly recommend my article about the subject:</p>\n<p><a href=\"https://medium.com/swinginc/playing-with-midi-in-javascript-b6999f2913c3\">Playing with MIDI in JavaScript</a></p>\n<p>and if you want to learn more about MIDI and how to use it in your browser, I recommend the introductory article to my MIDI library written in TypeScript:</p>\n<p><a href=\"https://kulak.medium.com/introducing-midival-f837b2d48185\">Introducing MIDIVal: the easiest way to interact with MIDI in your browser</a></p>\n<h2 id=\"optimizing-package-size\" tabindex=\"-1\">Optimizing package size <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>Once the game is done, it’s time for compression. My main goal was not to constrain myself when writing code, to be able to use object-oriented programming with proper class names, and defer the minification to a separate step. Thanks to that majority of the code stayed readable (I only had to manually change a handful of things) and still minifies well.</p>\n<p>The limit is exactly 13312b (13 * 1024) and my package without compression was initially around 14500b. That’s 1.5kb of compressed code to shave.</p>\n<p>I’ve started by incorporating uglify in the build flow which mostly removed some console.logs and shorten some names. I played a bit with parameters but it didn’t do a great job of replacing the names of my classes and methods. I decided to go with a custom solution.</p>\n<h2 id=\"codemod-for-typescript\" tabindex=\"-1\">Codemod for TypeScript <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h2>\n<p>Fortunately, the whole codebase was written in TypeScript. Thanks to that I could easily rename the majority of the class names, properties, and functions using a simple codemod written with the help of ts-morph.</p>\n<p><a href=\"https://ts-morph.com/\">TS-morph</a> is a simple tool helping with navigating the TypeScript AST tree. Instead of having to manually navigate through the nodes, you can easily extract all the symbols from the file and change them in all places automatically.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">generateNextName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">nameString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nclasses<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextName <span class=\"token operator\">=</span> <span class=\"token function\">generateNextName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> nextName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Rename class</span>\n    <span class=\"token class-name\"><span class=\"token builtin\">console</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'->'</span><span class=\"token punctuation\">,</span> nextName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>nextName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      renameInComments<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      renameInStrings<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The code above renames all class names into <code>AA</code> , <code>AB</code> , <code>AC</code> and so on. Because we use typed language, we know where the class is used so all usages are automatically renamed as well. The same was done to class methods and properties. <a href=\"https://github.com/h-sphere/gravepassing/blob/main/scripts/rename-classes.ts\">Here’s my full codemod</a>.</p>\n<h3 id=\"roadroller\" tabindex=\"-1\">Roadroller <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/gameboy-like-app-in-13k/\">#</a></h3>\n<p>To reduce the size even further I used <a href=\"https://lifthrasiir.github.io/roadroller/\">roadroller</a>. It is a tool that flattens JavaScript by using complex compression techniques like bytewise rANS coder, making the source code completely unreadable but very efficient. It shaved a few kb of my code making my bundle fit the limit with no problem.</p>\n<p>What do you think of the solutions? What would you add or improve in my entry? Put your thoughts down in the comments!</p>\n",
			"date_published": "2022-10-10T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/randomness-in-css/",
			"url": "https://hypersphere.codes/blog/randomness-in-css/",
			"title": "Randomness in CSS",
			"content_html": "<p>The majority of the languages have some mechanisms for generating random numbers. Unfortunately, that is not the case in CSS. This might not be a problem for most websites, but when dealing with a more generative approach (which CSS is really great for) we have to resort to JavaScript to generate random values. In his article, I will explore a nice way of generating it using only CSS.</p>\n<p>I will cover the following topics:</p>\n<ul>\n<li>Generating random numbers in CSS</li>\n<li>Using random values to generate ranges of numbers and colours</li>\n<li>Generating effect like in the cover for this article</li>\n</ul>\n<h2 id=\"random-number-generator-functions\" tabindex=\"-1\">Random number generator functions <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>To generate random values in CSS we need first to understand how the randomness in computers works. Computers cannot come up with a random number by themselves — they were designed to work in a very rigorous way — for a given input they return a set output. All they can do is generate pseudo-random numbers — the sequence of numbers that looks like it’s random but which still has some underlying rules behind it.</p>\n<p>An example of it might be the following function:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">f(x) = (A*x + c) mod 1;</code></pre>\n<p><code>A</code> and <code>c</code> parameters can be adjusted to our liking. <code>mod 1</code> is a notation meaning that we want to take a non-integer reminder of the number, for example <code>5.3 mod 1 = 0.3</code>.</p>\n<p>The function will always give us results within the range of <code>0-1</code> which is handy because we can later scale it however we want without needing to change the function itself - when generating colours we will use different ranges when generating sizes in pixels.</p>\n<p>Let’s set <code>A=8.385</code>, <code>c=2.534</code> then we will get the following pseudo-random sequence:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">fn(0)  = 0.5339999999999998\nfn(1)  = 0.9190000000000005\nfn(2)  = 0.3039999999999985\nfn(3)  = 0.6890000000000001\nfn(4)  = 0.07399999999999807\nfn(5)  = 0.4589999999999961\nfn(6)  = 0.8440000000000012\nfn(7)  = 0.2289999999999992\nfn(8)  = 0.6140000000000043\nfn(9)  = 0.9990000000000094\nfn(10) = 0.38400000000000034</code></pre>\n<p>If you don’t know the underlying sequence the numbers generated by the function might look random.</p>\n<p>In this case, given enough values, it is easy to reverse engineer the function, but the real-life random functions are usually much more complex. You can use higher order polynomials, trigonometry function and whatever else you imagine… unless you are working in plain CSS.</p>\n<p>In CSS we do not have a big range of mathematical functions to operate on but we can still use some basic operations like sum and multiplication, and using <code>@property</code> we can perform floor, but there’s not much more than that. Fortunately, that’s more than enough to get satisfactory results.</p>\n<h2 id=\"our-css-random-generator\" tabindex=\"-1\">Our CSS Random Generator <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>In our CSS random number generator, we will use the same technique but, to make the function less predictable, we will use a second-degree polynomial — meaning we will include an extra component of <code>B*x^2</code>.</p>\n<p>Moreover, our example will use sequential numbers to generate our random numbers. CSS does not natively offer us a mechanism to easily get the sequential numbers for each of the elements but, using the technique from my last article, we can generate it. The number will be stored as a <code>--n</code> CSS variable. For more information check out my previous article.</p>\n<p>Link Counting in CSS here.</p>\n<pre class=\"language-scss\" tabindex=\"0\"><code class=\"language-scss\">\n<span class=\"token keyword\">@include</span> <span class=\"token function\">primeCounter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@property</span> --floor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;integer>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* or true depending on context */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">div </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--x0</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> 1.334 <span class=\"token operator\">+</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> 0.5325 <span class=\"token operator\">+</span> 0.235<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--floor</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--x</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--floor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p class=\"codepen\" data-height=\"500\" data-default-tab=\"result\" data-slug-hash=\"MWVovOV\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/MWVovOV\">\n  Randomness in CSS</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>The CodePen above plots the results of the function for the first 100 values.</p>\n<p>The code uses <code>primeCounter</code> from my previous article to enumerate all divs (set as <code>--n</code> variable). This variable is then used to calculate x0 - this is our random generation function. The values can grow extremely big though so we need to clamp them. To get only the non-integer part of it, we can use the technique described in <a href=\"https://css-tricks.com/using-absolute-value-sign-rounding-and-modulo-in-css-today/#aa-round-as-well-as-ceil-and-floor\">this incredible CSS Tricks article</a> - by defining <code>@property</code> of the type <code>&lt;integer&gt;</code> we can use it to floor the number - meaning that 5.35 will become 5. By subtracting it from the original number we can finally get our result <code>mod 1</code>.</p>\n<p>Now we can use it to set some parameters of our styles.</p>\n<h3 id=\"compatibility\" tabindex=\"-1\">Compatibility <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h3>\n<p>The solution relies on @property to perform floor operation. It is not currently available in Firefox and Safari at the time of writing.</p>\n<p><a href=\"https://caniuse.com/?search=%40property\">Can I Use: @property</a></p>\n<h2 id=\"styling-using-random-values\" tabindex=\"-1\">Styling using random values <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>All the random values we have generated are from the range of <code>0 to 1</code>. That allows us to scale them to desired range and unit:</p>\n<h3 id=\"converting-to-length-width-height-etc\" tabindex=\"-1\">Converting to length (width, height, etc). <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h3>\n<p>To convert the value to the length we need to do the following:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">width: calc(50px + var(--r) * 100px);</code></pre>\n<p>This will convert our random values to 50px-150px range. In general, you can use the following equation to scale values from the 0-1 range to your desired a-b range:</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">calc(a + var(--r) * (b-a));</code></pre>\n<h3 id=\"converting-to-colour\" tabindex=\"-1\">Converting to colour <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h3>\n<p>To convert our random value to colour we need to decide what colour representation we want to use. CSS supports multiple representations including:</p>\n<ul>\n<li>RGB: red, green and blue components</li>\n<li>HSL: hue, saturation and luminance components</li>\n</ul>\n<p>There are other useful techniques like <a href=\"https://caniuse.com/css-color-function\">using <code>color()</code> function</a> or <a href=\"https://caniuse.com/css-lch-lab\">LCH / LAB colour space</a> but they are not widely adopted in browsers at the time of writing.</p>\n<p>Once you select the colour representation you want to use you can use it to vary the values accordingly:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>127 + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--r<span class=\"token punctuation\">)</span> * 127<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<img alt=\"Spectrum for RGB(x, 0, 0), x from 0 to 255.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 9.021978021978022\" width=\"3284\" height=\"364\" src=\"https://hypersphere.codes/img/QfpYTSRyiO-3284.webp\">\n<p>The code above will convert our random value to colours from the half intensity of red to the full intensity of red.</p>\n<p>We can also vary the saturation (or luminance) of the colour using HSL colour space:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>170<span class=\"token punctuation\">,</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--r<span class=\"token punctuation\">)</span> * 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<img alt=\"Spectrum for HSL(170, x, 50%). x from 0% to 100%.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 9.021978021978022\" width=\"3284\" height=\"364\" src=\"https://hypersphere.codes/img/IpcgLClHWx-3284.webp\">\n<p>You can also use HSL space to vary the colours in the range. To have your random colours vary from light green to dark blue, you can use the following formula:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>80 + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--r<span class=\"token punctuation\">)</span> * 170<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 80%<span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<img alt=\"Spectrum for HSL(x, 80%, 50%), x from 80 to 250.\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 9.021978021978022\" width=\"3284\" height=\"364\" src=\"https://hypersphere.codes/img/ry114peZXR-3284.webp\">\n<h2 id=\"example-generative-skyline\" tabindex=\"-1\">Example: Generative Skyline <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>We can use the techniques above to generate the following skyline. JavaScript in this example is used only to provide a new seed when moving the mouse. All calculations are done in CSS.</p>\n<p class=\"codepen\" data-height=\"600\" data-default-tab=\"result\" data-slug-hash=\"QWmgZRP\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/QWmgZRP\">\n  Untitled</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"example-shapes-grid\" tabindex=\"-1\">Example: Shapes Grid <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>The following example shows how you can apply this technique to vary multiple styles of elements at the same time. Each of the 4 sides of the border-radius and colour is determined based on the random values. Colours are generated from the range <code>hsl(x, 50%, 50%)</code> for x varying from 150 to 240.</p>\n<p>To generate the border radiuses we use the same single random number but for each of the edges, we scale it by different factors and clamp it within 0 and 1. Because each of those variables was configured as an integer (using <code>@property</code>), we end up with either 0 or 1. That value is then multiplied by 50% making the border either 0% or 50%.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@property</span> --x1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;integer>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@property</span> --x2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;integer>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@property</span> --x3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;integer>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@property</span> --x4</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;integer>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--x1</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>4 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--x2</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>5 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--v<span class=\"token punctuation\">)</span> - 3<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--x3</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>9 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--v<span class=\"token punctuation\">)</span> - 4<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--x4</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>10 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--v<span class=\"token punctuation\">)</span> - 7<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x1<span class=\"token punctuation\">)</span> * 50%<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x2<span class=\"token punctuation\">)</span> * 50%<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x3<span class=\"token punctuation\">)</span> * 50%<span class=\"token punctuation\">)</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--x4<span class=\"token punctuation\">)</span> * 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token punctuation\">}</span></code></pre>\n<p class=\"codepen\" data-height=\"600\" data-default-tab=\"result\" data-slug-hash=\"bGvRKyO\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/bGvRKyO\">\n  Randomness in CSS: Shapes</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"example-memphis-style-art-generator\" tabindex=\"-1\">Example: Memphis Style Art Generator <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/randomness-in-css/\">#</a></h2>\n<p>The last example is a <a href=\"https://en.wikipedia.org/wiki/Memphis_Group\">Memphis Group design style</a> pattern generator. The style was popular in the 80s and in the last years, it is making its comeback in art and pop culture. All random generation is done in CSS, JavaScript is used only to provide the ability to change seed or animate the seed change.</p>\n<p class=\"codepen\" data-height=\"600\" data-default-tab=\"result\" data-slug-hash=\"poVwwxK\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/poVwwxK\">\n  Memphis Pattern</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n",
			"date_published": "2022-09-22T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/counting-in-css/",
			"url": "https://hypersphere.codes/blog/counting-in-css/",
			"title": "Counting in CSS: Unlock magic of CSS variables",
			"content_html": "<p>CSS evolved like no other technology during its lifespan. The tool that started in 1994 as a simple way of styling basic documents on an early internet, became a language offering animations, matrix transformations, variables, several layouting systems, and much more. Because of the constant ecosystem changes, it is hard to keep up with all of them. Rather than announcing the next big CSS release (as happened with CSS3), nowadays W3C and browser vendors just bring new functionality incrementally.</p>\n<p>Recently I was amazed by Lea Verou’s talk about what CSS variables can do and started to experiment myself. I will refer to some of her techniques here to achieve my goal.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/ZuZizqDF4q8?si=DB6bDT7f5hDbtj-R\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n<p>To tease you about what we are going to build by the end of this lengthy article, I’ve added the video of the last example. It uses just a bunch of identical <code>&lt;div&gt;</code> elements with no extra properties and no JavaScript at all:</p>\n<iframe src=\"https://player.vimeo.com/video/729533818?h=4f04ab3ec4\" width=\"640\" height=\"409\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen=\"\"></iframe>\n<p><a href=\"https://vimeo.com/729533818\">Counting in CSS - end result</a> from <a href=\"https://vimeo.com/hprsphr\">Hypersphere</a> on <a href=\"https://vimeo.com\">Vimeo</a>.</p>\n<h2 id=\"enumerating-things-in-css\" tabindex=\"-1\">Enumerating things in CSS <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>The first thing that came to my mind after watching this video was to try vary CSS styles of sequential elements. Let’s imagine the most simple staircase design, each column represented by separate </p><div> element with no extra properties applied.<p></p>\n<img alt=\"How would you achieve this in CSS\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.688118811881188\" width=\"1364\" height=\"808\" src=\"https://hypersphere.codes/img/YPR4gbKxkF-1364.webp\">\n<p>CSS operates in a context of a single element and does not have mechanisms to interact with or query its surroundings (the adjacent sibling combinators are very limited and won’t help us here). We also do not have a straightforward mechanism in CSS to get the ordinal of a given element (<em>which</em> in a sequence it is).</p>\n<h3 id=\"what-about-counters\" tabindex=\"-1\">What about counters? <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>You might have a hunch to look into CSS counters — they surely can do the trick, can’t they? Unfortunately, counter values cannot be assigned to variables nor used in <code>calc</code> equation. I did an experiment with counters but it turned out to be dead-end.</p>\n<h2 id=\"naive-solution\" tabindex=\"-1\">Naive solution <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>Let’s try a naive solution first: we can just target each of the stairs separately and apply styling for it. Obviously, we’d have to repeat styles that change for each element making this solution pretty unportable.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"qBoNrXx\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/qBoNrXx\">\n  Stairs in CSS - Naive solution</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>The biggest drawback of the solution above is that we had to target each individual element with its separate selector and repeat styles for each of them.</p>\n<p>There surely must be a better solution?</p>\n<p>Below I present 2 approaches I’ve found — none of them is perfect and both have different drawbacks but they might be useful nevertheless.</p>\n<h2 id=\"finding-a-better-way-first-attempt-binary\" tabindex=\"-1\">Finding a better way — first attempt: binary! <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>In the search for a better solution, I resorted to the basics of computer science. It turns out that in conjunction with nth-child we can use it to count our elements. If you are not familiar with binary, I will try to quickly explain it in the next section. If you think you know binary already, feel free to skip directly to the solution.</p>\n<h3 id=\"introduction-to-binary-system\" tabindex=\"-1\">Introduction to binary system <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>The binary system is the essence of our modern computing. All data are stored, transmitted and computed using its binary representation. There are many ways of encoding numbers to binary but, fortunately for us, in our case, we only operate on positive integers (whole numbers), which makes it possible to use the most simple representation. I have prepared <em>Binary System 101</em> below to explain it (mind the pun):</p>\n<img alt=\"Binary 101\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2\" width=\"1400\" height=\"700\" src=\"https://hypersphere.codes/img/qz3m3KIsS9-1400.webp\">\n<p>The main building blocks of the binary system are 0-s and 1-s. Like in the decimal system we are used to, binary is positional — meaning that the position of a given zero or one in the sequence matters. The further to the left, the bigger part of the number it represents.</p>\n<p>Unlike the decimal system, in which moving left increases by the factor of 10, in binary each movement doubles the value — for example <code>101</code> in binary represents 5 in decimal: <code>1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 1 * 4 + 0 * 2 + 1 * 1 = 4 + 1 = 5</code>.</p>\n<h3 id=\"finding-patterns\" tabindex=\"-1\">Finding patterns <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>To use our knowledge of binary system in CSS, we need to find a way to target specific bits — we want to write a selector that will match all numbers that should have specific bit set to 1 . Then we will set variables like b0, b1, b2, etc. to 1 only for the matching elements.</p>\n<p>Let’s write first 16 numbers in binary (including 0 for consistency) and try to spot some patterns that would help us implement it in CSS. On the image below I highlighted all 1s — can you spot the pattern?</p>\n<img alt=\"Patterns in Binary\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2\" width=\"1400\" height=\"700\" src=\"https://hypersphere.codes/img/UbSAsVrgPl-1400.webp\">\n<p>For each column, the pattern stays the same:</p>\n<ul>\n<li>The first column (from the right) has 1 set every other number.</li>\n<li>The second column (from the right) pattern alternates every 2 numbers.</li>\n<li>The next one alternates every 4 rows</li>\n<li>the next one 8, etc.</li>\n</ul>\n<p>In general, the k-th column (indexing from 0) has sequence of 2^k bits off followed by 2^k bits on. We can use it in our CSS.</p>\n<h2 id=\"binary-counters-in-css\" tabindex=\"-1\">Binary counters in CSS <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>Using that discovery we can write more generic nth-child selectors that will only match numbers that should have a specific bit set on. We can use CSS variables to set the bits. Then in the final selector, we can compute the actual counter value using the binary to decimal conversion.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--b0</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--b1</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--b2</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--b3</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--b4</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div:nth-child(2n)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--b0</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div:nth-child(4n+3),\ndiv:nth-child(4n)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--b1</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div:nth-child(8n),\ndiv:nth-child(8n-1),\ndiv:nth-child(8n-2),\ndiv:nth-child(8n-3)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--b2</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div:nth-child(16n),\ndiv:nth-child(16n-1),\ndiv:nth-child(16n-2),\ndiv:nth-child(16n-3),\ndiv:nth-child(16n-4),\ndiv:nth-child(16n-5),\ndiv:nth-child(16n-6),\ndiv:nth-child(16n-7)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--b3</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">--n</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--b0<span class=\"token punctuation\">)</span> + 2 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--b1<span class=\"token punctuation\">)</span> + 4 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--b2<span class=\"token punctuation\">)</span> + 8 * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t// Any CSS logic using --n can go <span class=\"token property\">here</span><span class=\"token punctuation\">:</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50px + 50px * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The beauty of the solution is the fact that to represent the first 100 elements we only need 7 bits meaning 7 distinctive selector groups. That’s a big improvement compared to a naive solution that would need 100 separate classes. Moreover, we can automate it using SCSS mixins.</p>\n<h3 id=\"scss-mixin\" tabindex=\"-1\">SCSS mixin <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>If you use a CSS preprocessor like SCSS you can use the following mixing to achieve the same effect. It produces all required styles for user-defined depth. Because the selectors grow quite a bit with each step, for most cases we would probably want to stay below 8 which will still allow us to distinguish between 127 elements.</p>\n<pre class=\"language-scss\" tabindex=\"0\"><code class=\"language-scss\"><span class=\"token keyword\">@mixin</span> <span class=\"token function\">binaryCounter</span><span class=\"token punctuation\">(</span><span class=\"token property\"><span class=\"token variable\">$selector</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token property\"><span class=\"token variable\">$bits</span></span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> <span class=\"token selector\">0 to <span class=\"token variable\">$bits</span> </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">--b<span class=\"token variable\">#{$i}</span></span><span class=\"token punctuation\">:</span> 0\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token property\"><span class=\"token variable\">$exponent</span></span><span class=\"token punctuation\">:</span> 1\n  <span class=\"token property\"><span class=\"token variable\">$eq</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0\"</span>\n  <span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> <span class=\"token selector\">0 to <span class=\"token variable\">$bits</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\"><span class=\"token variable\">$exponent</span></span><span class=\"token punctuation\">:</span> 2 <span class=\"token operator\">*</span> <span class=\"token variable\">$exponent</span>\n    <span class=\"token property\"><span class=\"token variable\">$eq</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$eq</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" + #{$exponent/2} * var(--b#{$i})\"</span>\n    <span class=\"token property\"><span class=\"token variable\">$sel</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">@for</span> <span class=\"token variable\">$j</span> <span class=\"token keyword\">from</span> <span class=\"token selector\">0 to <span class=\"token variable\">$exponent</span>/2 </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\"><span class=\"token variable\">$sel</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$sel</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"#{$selector}:nth-child(#{$exponent}n - #{$j}), \"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token variable\">#{$sel}</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">--b<span class=\"token variable\">#{$i}</span></span><span class=\"token punctuation\">:</span> 1\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token variable\">#{$selector}</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--n</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$eq}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage</span>\n<span class=\"token keyword\">@include</span> <span class=\"token function\">binaryCounter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> 9<span class=\"token punctuation\">)</span></code></pre>\n<p>You can see the use of the mixin below to generate 256 elements and style them individually.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"eYMzrJZ\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/eYMzrJZ\">\n  Binary counting in CSS - SCSS</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h3 id=\"drawbacks\" tabindex=\"-1\">Drawbacks <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>Unfortunately, after closer analysis of the code you can realise that we are still generating a lot of code. We no longer have individual styles for each element, instead we have only few (to be technical ceil(log2(n)) for any given maximal n elements we want to distinguish but each of those groups have exponentially more coma-separated selectors. We still end up with many selectors.</p>\n<h2 id=\"in-a-search-of-a-better-solution-prime-numbers\" tabindex=\"-1\">In a search of a better solution: prime numbers <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>After the first failed attempt, I tried a different approach. What if instead of splitting a number into its binary bits, we would try to use its prime factors. As a refresher, below’s the <em>Prime Numbers Primer</em>:</p>\n<img alt=\"Prime numbers primer\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2\" width=\"1400\" height=\"700\" src=\"https://hypersphere.codes/img/S3erLkvhda-1400.webp\">\n<p>Unfortunately computing just prime numbers and making groups out of them is not enough. Some numbers are made out of the same prime factor combined: 4 is the smallest example — it’s prime factors are 2 * 2. With that in mind I created a mixin that generates prime groups and their powers up to the given threshold:</p>\n<pre class=\"language-scss\" tabindex=\"0\"><code class=\"language-scss\"><span class=\"token keyword\">@function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$primesList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$prime</span> in <span class=\"token variable\">$primesList</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$n</span> <span class=\"token operator\">%</span> <span class=\"token variable\">$prime</span> <span class=\"token operator\">==</span> 0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">@return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">@return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">@mixin</span> <span class=\"token function\">primeCounter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$selector</span><span class=\"token punctuation\">,</span> <span class=\"token property\"><span class=\"token variable\">$upperBound</span></span><span class=\"token punctuation\">:</span> 2000<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token property\"><span class=\"token variable\">$curr</span></span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\"><span class=\"token variable\">$primesList</span></span><span class=\"token punctuation\">:</span> []<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">@while</span> <span class=\"token selector\"><span class=\"token variable\">$curr</span> &lt;= <span class=\"token variable\">$upperBound</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@if</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$curr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$primesList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\"><span class=\"token variable\">$primesList</span></span><span class=\"token punctuation\">:</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$primesList</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$curr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token property\"><span class=\"token variable\">$curr</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$curr</span> <span class=\"token operator\">+</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$prime</span> in <span class=\"token variable\">$primesList</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">--p<span class=\"token variable\">#{$prime}</span></span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property\"><span class=\"token variable\">$mult</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">@each</span> <span class=\"token selector\"><span class=\"token variable\">$prime</span> in <span class=\"token variable\">$primesList</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\"><span class=\"token variable\">$mult</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$mult</span> <span class=\"token string\">\" * var(--p#{$prime})\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\"><span class=\"token variable\">$val</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$prime</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">@while</span> <span class=\"token selector\"><span class=\"token variable\">$val</span> &lt;= <span class=\"token variable\">$upperBound</span> </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\"><span class=\"token variable\">#{$selector}</span></span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$val}</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">--p<span class=\"token variable\">#{$prime}</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">#{$val}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token property\"><span class=\"token variable\">$val</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$val</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$prime</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token selector\"><span class=\"token variable\">#{$selector}</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--n</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$mult}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Example use</span>\n<span class=\"token keyword\">@include</span> <span class=\"token function\">primeCounter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> 500<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Below you can see an example with the threshold set to 500. Notice that up to the threshold all the numbers are perfectly fine but above that the pattern breaks. All prime numbers above would default to 1 as they were not computed. Some composite numbers might miss one or few of its factors resulting in the number being smaller than expected. But for plenty of values, we can still see proper results.</p>\n<p>The solution to generate properly first 500 numbers required 114 separate selectors — <strong>it’s a great improvement on both naive and binary solutions</strong>. Moreover, it still provides a lot of value for the elements above the threshold and can be useful in cases like generative art where we might not care too much about the exact values.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"oNqzWMR\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/oNqzWMR\">\n  Counting in CSS: Primary Counter</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"use-cases\" tabindex=\"-1\">Use-cases <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h2>\n<p>There are multiple use-cases for being able to distinguish between identical elements and being able to process them differently. I came up with a few, but <strong>I would like to hear more from you in the comments about what other ideas you might have</strong>! Here are couple of mines:</p>\n<h3 id=\"staircase\" tabindex=\"-1\">Staircase <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>First, let’s finish out the staircase example. Using this technique we can write more generic code to achieve the same effect.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"VwXjEov\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/VwXjEov\">\n  Binary counters in CSS - stairs</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h3 id=\"generative-art\" tabindex=\"-1\">Generative art <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/counting-in-css/\">#</a></h3>\n<p>Generative art is an amazing example where CSS can be incorporated. There are plenty of great CSS artists out there but all the examples I could find use at least some JavaScript to either number the elements or add randomness to the stylesheet. All the examples here do not use any JavaScript at all.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"qBoNQWW\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/qBoNQWW\">\n  Binary Counter in CSS - Generative Art 1</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Great thing about this technique is that you can use the ordinal number inside the animations too. Each element will use it’s own value making it possible to implement very interesting effects:</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"mdxEQJO\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/mdxEQJO\">\n  Untitled</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>We can also use <code>@property</code> to define and animate variable to create interesting rotating effects like this vortex-like creation. In the browsers that do not support <code>@property</code> the image will appear static providing a graceful fallback. This example also uses a prime generator set to 250 threshold despite utilising 500 elements to show that even less accurate, the values above the threshold can give us really interesting patterns too.</p>\n<p>Because of use of <code>@property</code> the animation works only in Chrome but in other browsers the static version is shown.</p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"result\" data-slug-hash=\"ExEyOVB\" data-user=\"hypersphere\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/hypersphere/pen/ExEyOVB\">\n  Generative Art: Rotating Sphere</a> by hypersphere (<a href=\"https://codepen.io/hypersphere\">@hypersphere</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>What is your take on this solution? Do you know any examples where having ordinal numbers for elements would be helpful?</p>\n</div>",
			"date_published": "2022-07-13T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/advanced-typescript-mapped-types/",
			"url": "https://hypersphere.codes/blog/advanced-typescript-mapped-types/",
			"title": "Advanced TypeScript: Mapped Types and more",
			"content_html": "<p>Using strongly typed language has a lot of benefits. But TypeScript is not a magical tool — the stronger types you provide, the better results you will get. Unfortunately, in a lot of the cases we can end up using very broad types to describe much narrower sets of values — it’s foremost apparent when using primitives like strings or numbers.</p>\n<p>In my previous article I write about an issue of using plain primitive types, as they often represent different things and cannot be used interchangeably:</p>\n<a class=\"external-link-data\" href=\"https://medium.com/hypersphere-codes/better-types-for-strings-and-numbers-in-typestring-using-opaque-types-c9153eb8009c\">\n\t\t\t<div class=\"external-image\">\n\t\t\t\t<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*sQKE6cmOqGgIMMrNI0JxpQ.png\">\n\t\t\t</div>\n\t\t\t<div class=\"external-link-content\">\n\t\t\t\t<div class=\"external-link-title\">Better types for strings and numbers in TypeString using opaque types</div>\n\t\t\t\t<div class=\"external-link-description\">Are all strings equal? They serve different purposes in our codebases yet we type them with the same type. But fear not, there is a…</div>\n\t\t\t</div>\n\t\t</a>\n<p>Opaque types are great when dealing with infinite subsets of values. However, in plenty of cases, we deal with a finite subset of strings (or other primitive values). Instead of verifying those values in runtime, we can leverage TypeScript mechanisms to ensure we pass types properly.</p>\n<img alt=\"Subset\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.5006002400960383\" width=\"2500\" height=\"1666\" src=\"https://hypersphere.codes/img/Ui2Y75W01T-2500.webp\">\n<p>In this article I’d like to use an example that is quite common in multi-regional sites that deal with multiple locales, to showcase some of the lesser-known features of TypeScript. This will provide a good overview of the following TypeScript features:</p>\n<ul>\n<li><code>as const</code> expression</li>\n<li><code>keyof</code> and <code>typeof</code></li>\n<li>type argument inference for dynamic type resolution in generics</li>\n<li>mapped types</li>\n<li>using <code>never</code> in conditional types to filter out unions</li>\n</ul>\n<h2 id=\"the-problem\" tabindex=\"-1\">The Problem <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>Imagine you are working on a website that is available in multiple countries (regions). Each country has its version of the website that can be available in multiple local languages. Moreover, we want to be able to disable certain regions or languages using the configuration below.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> EnabledRegons <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string-property property\">\"GB\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"IT\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string-property property\">\"it\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"PL\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"pl\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string-property property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-property property\">\"LU\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string-property property\">\"fr\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string-property property\">\"de\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string-property property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Because we know we won’t change this object in our code in runtime, we can <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions\">use <code>as const</code> assertion</a> to let TypeScript know that there’s no way those values will be modified. This allows TypeScript to freeze the structure of an object and prevent expression widening.</p>\n<img alt=\"As const in TypeScript\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.5006002400960383\" width=\"2500\" height=\"1666\" src=\"https://hypersphere.codes/img/t1MUrUXwe_-2500.webp\">\n<h2 id=\"extracting-countries\" tabindex=\"-1\">Extracting Countries <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>Now we can implement a function that will return us the full name of the country for a given country code. It might be tempting to type it as follows:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> countryCodeToName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>countryCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>countryCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"GB\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Great Britain\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"IT\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Italy\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"PL\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Poland\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"LU\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Luxembourg\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The code above covers all possible country types, but TypeScript will complain that we don’t have a default value for our switch case. We could add a dummy return in this case which we know it’s never going to be used, but this solution has pitfalls:</p>\n<ul>\n<li>We introduce artificial code branches for situations we know will never happen</li>\n<li>If we decide to remove a region, we will end up with unused code across our application</li>\n<li>If we decide to add a new region, we will need to look for places where to add it — we cannot use TypeScript to tell us where should we edit our code</li>\n</ul>\n<p>Instead, we could narrow our countryCode parameter type to accept only the keys of our <code>EnableRegions</code> array.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> countryCodeToName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>countryCode<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> EnabledRegons<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>countryCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"GB\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Great Britain\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"IT\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Italy\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"PL\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Poland\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"LU\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Luxembourg\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now TypeScript no longer complains about the lack of default return because it knows we covered all possible cases. Moreover, if you decide to remove one of the regions from the array, TypeScript will raise an error in all the cases where you use this value so you can easily remove obsolete code. If we decide to add a new value, TypeScript will let us know where in the code we are not covering the new scenario.</p>\n<h2 id=\"typing-languages-based-on-the-region\" tabindex=\"-1\">Typing languages based on the region <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>Now let’s imagine we want to have a function getUrl that returns a value for a specific country and the language. We also want to restrict, on the typing language level, that you can’t pass incorrect language/country configuration:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no error</span>\n<span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"it\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no error</span>\n<span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type error because we didn't specify pl to be correct language for IT region</span></code></pre>\n<p>Fortunately, we can use type argument inference to capture country code and based on that type the second argument.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getUrl <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>CountryCode <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> EnabledRegons<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span>country<span class=\"token operator\">:</span> CountryCode<span class=\"token punctuation\">,</span>\n  language<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> EnabledRegons<span class=\"token punctuation\">[</span>CountryCode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// body of our function</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This technique is really useful in all the cases where one argument determines types of the other ones.</p>\n<p>Probably one of the most common use cases is addEventListener method - based on the event type, the callback argument is determined. I used the same concept in my cross-platform Event Bus library. Check out my other article about it:</p>\n<a class=\"external-link-data\" href=\"https://medium.com/hypersphere-codes/introducing-omnibus-new-event-bus-library-written-in-typescript-4fc5d2f684c6\">\n\t\t\t<div class=\"external-image\">\n\t\t\t\t<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*j7nGJWCG85iiHeDbkjNDtA.jpeg\">\n\t\t\t</div>\n\t\t\t<div class=\"external-link-content\">\n\t\t\t\t<div class=\"external-link-title\">Introducing Omnibus: new Event Bus library written in TypeScript</div>\n\t\t\t\t<div class=\"external-link-description\">event bus library for all</div>\n\t\t\t</div>\n\t\t</a>\n<h2 id=\"dynamically-creating-locale-strings\" tabindex=\"-1\">Dynamically creating locale strings <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>If you worked on multilingual websites you might have come across a format that captures both region and language: locale.</p>\n<p>Locale is a string that contains both region and country connected with a hyphen. You might have come across it when using locale-aware methods like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\"><code>Date.prototype.toLocaleDateString</code></a> that formats date into proper language.</p>\n<p>Let us refactor the previous method to use a single parameter locale that will encapsulate both of those values — obviously it should be typed so we need dynamically create possible locale values. Fortunately, we can use mapped types to do so:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ValueOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Locale</span> <span class=\"token operator\">=</span> ValueOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Region<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> EnabledRegons<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre>\n<img alt=\"Regions mapped\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.7506849315068493\" width=\"1278\" height=\"730\" src=\"https://hypersphere.codes/img/nKOZd9ElTT-1278.webp\">\n<p>The <code>Locale</code> type is created by iterating over regions and for each of them, it generates a mapped type consisting of the language code combined with region code. One small quirk we had to add in the example above is <code>&amp; string</code> — potential <code>keyof</code> type is <code>string | number | symbol</code> and we need to tell TS that we only care about the intersection with <code>string</code>.</p>\n<h2 id=\"excluding-false-values\" tabindex=\"-1\">Excluding false values <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>We can improve our solution and automatically exclude locales that are disabled in our configuration object. To do it, let’s create the following helper generic type:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ExcludeFalseValues<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Locale</span> <span class=\"token operator\">=</span> ValueOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Region<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">keyof</span> ExcludeFalseValues<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> EnabledRegons<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre>\n<p>The code above uses never to filter out unwanted values. When a value is not extending true (which is TS way of checking if it is equal to it or not), then instead of key we set never resulting in TypeScript omitting this field.</p>\n<p>Now if we decide to stop serving a locale, TypeScript will automatically detect which code should we remove alongside it:</p>\n<img alt=\"Adding disabled regions\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 1.9363636363636363\" width=\"1278\" height=\"660\" src=\"https://hypersphere.codes/img/wv_vkdvYpr-1278.webp\">\n<p>This technique can be particularly useful when dealing with flipper flags you want to decommission alongside all the related code or when maintaining translations, making sure we keep keys in sync between languages.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/advanced-typescript-mapped-types/\">#</a></h2>\n<p>TypeScript mapped types and other advanced techniques allow us to type our code much stricter if we spend time typing our code precisely. On the other side, it’s usually not trivial and adds a lot of extra overhead. What do you think? In which cases do you think this technique is the most useful? Or maybe you know other solutions that can help with similar tasks?</p>\n",
			"date_published": "2022-06-27T00:00:00Z"
		}
		,
		{
			"id": "https://hypersphere.codes/blog/typescript-opaque-branded-types/",
			"url": "https://hypersphere.codes/blog/typescript-opaque-branded-types/",
			"title": "Better typings for strings and numbers in TypeString using opaque types",
			"content_html": "<p>TypeScript is a great tool to ensure your code is correct and you are not passing incorrect data around. Unfortunately, there are still cases when we can’t guarantee that the types are correct — especially when dealing with primitives like strings or numbers.</p>\n<p>In almost every modern application we use strings to represent a bunch of different types of data: tokens, resource identifiers, names of events, generic data, template strings, and much more. Each of those use cases is very specific, yet, all of them will usually end up being typed as a generic <code>string</code>.</p>\n<img alt=\"each of these strings has completely different use-case yet we type them the same\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.8260869565217392\" width=\"1560\" height=\"552\" src=\"https://hypersphere.codes/img/Qp6OvyebZ8-1560.webp\">\n<p>Sometimes it is obvious that one is not interchangeable with another but in other cases it might be tricky without relying on manual testing.</p>\n<p>When it comes to numbers, they can represent: currency, virtual points, internal counters, timestamps, etc. Again, in our apps they all are typed as a <code>number</code>.</p>\n<p>The infamous example of incorrect use of types that ended up catastrophicaly is <a href=\"https://en.wikipedia.org/wiki/Mars_Climate_Orbiter\">Mars Climate Orbiter</a>: one piece of software incorrectly produced results in United States customary units (pound-force seconds) instead of SI units (newton-seconds). It resulted in probe deorbiting on 23 September 1999 and failing $327.6 million mission.</p>\n<p>In this article I will deal with slightly less severe examples. I will try to show the drawbacks of using primitive types directly and introduce you to solution: Opaque Types (also commonly referred in TypeScript as Brands).</p>\n<h2 id=\"opaque-type\" tabindex=\"-1\">Opaque Type <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typescript-opaque-branded-types/\">#</a></h2>\n<p>Opaque type is a type which implementation is hidden to the application as a whole, and is accessible only in a specific function or a file. Thanks to that we can ensure the data was created only in a specific place.</p>\n<p>Unfortunately due to the <a href=\"https://en.wikipedia.org/wiki/Duck_typing\">duck typing</a>, JavaScript does not really have such mechanism in place. Almost every object can be mimicked by replicating set of its properties. Moreover, nor JavaScript nor TypeScript provide any way of creating distinguishable type aliases (aka. non-structural or nominal typing).</p>\n<p>The solution to overcome those limitations is fortunately straight-forward:</p>\n<img alt=\"\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2\" width=\"1560\" height=\"780\" src=\"https://hypersphere.codes/img/x9F8ifSr4V-1560.webp\">\n<p>The code above will allow us to distinguish between IPs and URLs even though the underlying type in both cases is the same.</p>\n<h2 id=\"example-with-two-tokens\" tabindex=\"-1\">Example with two tokens <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typescript-opaque-branded-types/\">#</a></h2>\n<p>Let’s imagine the following scenario. We have a system that uses authentication server to obtain token, which later allows up to communicate with the API. To obtain it, we need to send another token to the auth server. This logic is represented in the diagram below:</p>\n<img alt=\"Example with two tokens communication\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.005509641873278\" width=\"728\" height=\"363\" src=\"https://hypersphere.codes/img/39QzCd8EkD-728.webp\">\n<p>Let’s implement this logic in our code using regular strings:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">authenticateAndGetData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> apiToken <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getTokenFromAuthServer</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"can-you-spot-the-bug-in-the-code-above\" tabindex=\"-1\">Can you spot the bug in the code above? <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typescript-opaque-branded-types/\">#</a></h3>\n<p><strong>The bug</strong>: Instead of using <code>apiToken</code> as an argument to <code>getData</code> method we use the token used to authenticate us with the auth server. In the best case, we would find this error while testing, in the worst, it would end up on production — both scenarios require runtime checks so we cannot use any advantages of the typing system.</p>\n<p>Fortunately, there is a solution. We can mark the strings with different “types”, making our code resilient to that kind of errors:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OpaqueString<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    __type<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AuthToken</span> <span class=\"token operator\">=</span> OpaqueString<span class=\"token operator\">&lt;</span><span class=\"token string\">\"authToken\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ServiceToken</span> <span class=\"token operator\">=</span> OpaqueString<span class=\"token operator\">&lt;</span><span class=\"token string\">\"serviceToken\"</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AuthResult</span> <span class=\"token punctuation\">{</span>\n\ttoken<span class=\"token operator\">:</span> ServiceToken\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getTokenFromAuthServer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>authToken<span class=\"token operator\">:</span> AuthToken<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>AuthResult<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// This is mock implementation, usually you'd make a request to authService here</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\ttoken<span class=\"token operator\">:</span> <span class=\"token string\">\"secret_token\"</span> <span class=\"token keyword\">as</span> ServiceToken\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> ServiceToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">\"Xxx\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">authenticateAndGetData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> AuthToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> apiToken <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getTokenFromAuthServer</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The most interesting part of the code above is an <code>OpaqueString</code> type — it’s “marking” our string with an additional <code>__type</code> field — this field is never meant to be accessed directly (that’s why it is prepended with double underscore). Instead, TypeScript will use it to determine if two types are equivalent to each other. Thanks to that, the code above will result in the following error:</p>\n<img alt=\"Error in VSCode\" loading=\"lazy\" decoding=\"async\" style=\"aspect-ratio: 2.395209580838323\" width=\"1600\" height=\"668\" src=\"https://hypersphere.codes/img/uvGVM3o4PC-1600.webp\">\n<h2 id=\"example-with-currencies\" tabindex=\"-1\">Example with currencies <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typescript-opaque-branded-types/\">#</a></h2>\n<p>The same technique can be used to distinguish between different number types. Imagine you are working on an online store and you might have products in different currencies. Summing up the values of products in different currencies does not make any sense and can cause inconsistencies in the system or even a revenue loss. To make sure we’ve implemented all necessary fail-safes in our system, we could use the following opaque type:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CurrencyCode</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"GBP\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"EUR\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"PHP\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Currency<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> CurrencyCode<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    __type<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> computeUKVAT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>price<span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"GBP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"GBP\"</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"GBP\"</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> computePhilipinesVAT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>price<span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"PHP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"PHP\"</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> <span class=\"token number\">0.12</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"PHP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> priceInGbp <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"GBP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> priceInEur <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"EUR\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> priceInPhp <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"PHP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">computeUKVAT</span><span class=\"token punctuation\">(</span>priceInGbp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">computeUKVAT</span><span class=\"token punctuation\">(</span>priceInPhp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type error.</span></code></pre>\n<p>The code above will throw a type error when trying to pass the amount in philippine peso (PHP) to <code>computeUKVat</code> method.</p>\n<p>You can also use this method to do more advanced checks like the one below:</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NoUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CurrencyCode</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"GBP\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"EUR\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Currency<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> CurrencyCode<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    __type<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sumProducts <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CurrencyCode</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>products<span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span>NoUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> productInGbp <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"GBP\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> productInEur1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"EUR\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> productInEur2 <span class=\"token operator\">=</span> <span class=\"token number\">40</span> <span class=\"token keyword\">as</span> Currency<span class=\"token operator\">&lt;</span><span class=\"token string\">\"EUR\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sumProducts</span><span class=\"token punctuation\">(</span>productInEur1<span class=\"token punctuation\">,</span> productInEur2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sumProducts</span><span class=\"token punctuation\">(</span>productInGbp<span class=\"token punctuation\">,</span> productInEur1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The code allows you to pass products in a single currency only. The first <code>sumProducts</code> call will not throw any error because all the arguments are in EUR. The second one will fail because its parameters are of different currencies. To detect that we use NoUnion helper type that ensures types do not make a union (they would normally resolve into <code>Currency&lt;”EUR” | “GBP”&gt;</code> which we try to avoid.</p>\n<h2 id=\"more-generic-solutions\" tabindex=\"-1\">More generic solutions <a class=\"header-anchor\" href=\"https://hypersphere.codes/blog/typescript-opaque-branded-types/\">#</a></h2>\n<p>The problem is not new and there are already existing solutions for it. Many TypeScript utility libraries provide helper generics for it:</p>\n<ul>\n<li><a href=\"https://github.com/piotrwitek/utility-types\">utility-types</a> provides <a href=\"https://github.com/piotrwitek/utility-types#brandt-u\">Brand&lt;T, U&gt;</a></li>\n<li><a href=\"https://github.com/millsp/ts-toolbelt\">ts-toolbelt</a> provides <a href=\"https://millsp.github.io/ts-toolbelt/modules/any_type.html\">Type&lt;A, Id&gt;</a></li>\n<li><a href=\"https://github.com/ts-essentials/ts-essentials\">ts-essentials</a> provides <a href=\"https://github.com/ts-essentials/ts-essentials#Opaque-types\">Opaque&lt;T, Key&gt;</a></li>\n<li><a href=\"https://github.com/kourge/ts-brand\">ts-brand</a> which provides more advanced functionality for branding.</li>\n</ul>\n<p>If you have used Flow before, you might be familiar with its <a href=\"https://flow.org/en/docs/types/opaque-types/\">Opaque Type Aliases</a> which provide similar functionality.</p>\n<p>Native TypeScript implementation for similar solution has been discussed in <a href=\"https://github.com/microsoft/TypeScript/issues/202\">TypeScript community since 2014</a> but it doesn’t seem to be any consensus so far. Fortunately the solution is straight forward so you can start using it in almost every project if you’d like.</p>\n",
			"date_published": "2022-04-25T00:00:00Z"
		}
		
	]
}
